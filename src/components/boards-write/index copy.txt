"use client"
import "@ant-design/v5-patch-for-react-19"
import styles from "./styles.module.css"
import defaultImage from "../../images/asset/add_image.png"
import { IPageWriteProps } from "./types"
import DaumPostcodeEmbed from "react-daum-postcode"
import { USE_BOARD_WRITE } from "./hooks"
import { Modal } from "antd"
import Image from "next/image"

const PAGE_WRITE_COMPO = (props: IPageWriteProps) => {
  const { isEdit } = props
  const {
    address,
    youtubeLink,
    detailAddress,
    data,
    inputs,
    images,
    editImages,
    password,
    nameError,
    passwordError,
    titleError,
    contextError,
    isButtonDisabled,
    isModalOpen,
    modalContent,
    isAddressModalOpen,
    zipcode,
    handleOk,
    onToggleAddressModal,
    onChangeInputs,
    onChangePassword,
    onClickEnroll,
    onChangeDetailAddress,
    onChangeYoutubeLink,
    enrollButtonStyle,
    onClickCancelNew,
    onClickCancelEdit,
    handleComplete,
    fileRef,
    handleFileChange,
    handleDeleteImage,
  } = USE_BOARD_WRITE(isEdit)

  return (
    <>
      <div className={styles.Layout}>
        <div className={styles.boxContainer}>
          {/* 제목 */}
          <div className={styles.titleTextStyle}>{props.isEdit ? "게시글 수정" : "게시글 등록"}</div>

          {/* 작성자 및 비밀번호 입력 */}
          <div className={styles.enrollText}>
            <div className={styles.enrollHalf}>
              <div className={styles.textAlignColumn}>
                <div className={styles.textStyle}>작성자</div>
                <span className={styles.essentialFill}>*</span>
              </div>
              <input
                id="name"
                className={props.isEdit ? styles.disabled_input : styles.enrollInput}
                disabled={isEdit}
                value={props.isEdit ? (data?.fetchBoard.writer ?? "") : inputs.name}
                type="text"
                placeholder="작성자 명을 입력하세요."
                onChange={onChangeInputs}
              />
              <div className={styles.errorText}>{nameError}</div>
            </div>
            <div className={styles.enrollHalf}>
              <div className={styles.textAlignColumn}>
                <div className={styles.textStyle}>비밀번호</div>
                <span className={styles.essentialFill}>*</span>
              </div>
              <input
                className={props.isEdit ? styles.disabled_input : styles.enrollInput}
                disabled={isEdit}
                defaultValue={props.isEdit ? "*********" : password}
                type="password"
                placeholder="비밀번호를 입력하세요."
                onChange={onChangePassword}
              />
              <div className={styles.errorText}>{passwordError}</div>
            </div>
          </div>

          <div className={styles.enrollBorder}></div>
          {/* 제목 입력 */}
          <div className={styles.containerBox}>
            <div className={styles.textAlignColumn}>
              <div className={styles.textStyle}>제목</div>
              <span className={styles.essentialFill}>*</span>
            </div>
            <input
              id="title"
              className={styles.enrollInput}
              defaultValue={isEdit ? data?.fetchBoard.title : inputs.title}
              type="text"
              placeholder="제목을 입력하세요."
              onChange={onChangeInputs}
            />
            <div className={styles.errorText}>{titleError}</div>
          </div>
          <div className={styles.enrollBorder}></div>

          {/* 내용 입력 */}
          <div className={styles.containerBox}>
            <div className={styles.textAlignColumn}>
              <div className={styles.textStyle}>내용</div>
              <span className={styles.essentialFill}>*</span>
            </div>
            <input
              id="content"
              className={`${styles.enrollInput} ${styles.enrollTextArea}`}
              defaultValue={props.isEdit ? data?.fetchBoard?.contents : inputs.content}
              type="text"
              placeholder="내용을 입력하세요."
              onChange={onChangeInputs}
            />
            <div className={styles.errorText}>{contextError}</div>
          </div>

          {/* 주소 입력 */}
          <div className={styles.addressBox}>
            <div className={styles.textStyle}>주소</div>
            <div className={styles.addressSearch}>
              <input
                readOnly
                value={zipcode}
                id="zipcode-input"
                className={styles.zipCodeInput}
                type="text"
                placeholder="012345"
              />

              <button className={`${styles.addressButton} ${styles.buttonTextStyle}`} onClick={onToggleAddressModal}>
                우편번호 검색
              </button>
            </div>
            <input
              value={address}
              readOnly
              className={styles.enrollInput}
              type="text"
              placeholder="주소를 입력하세요."
            />
            <input
              value={detailAddress}
              id="detail-address-input"
              className={styles.enrollInput}
              type="text"
              placeholder="상세주소를 입력하세요."
              onChange={onChangeDetailAddress}
            />
          </div>

          {isAddressModalOpen && (
            <Modal open={isAddressModalOpen} onCancel={onToggleAddressModal} onOk={onToggleAddressModal} footer={<></>}>
              <DaumPostcodeEmbed onComplete={handleComplete} />
            </Modal>
          )}
          <div className={styles.enrollBorder}></div>

          {/* 유튜브 링크 입력 */}
          <div className={styles.containerBox}>
            <div className="textStyle">유튜브 링크</div>
            <input
              value={youtubeLink}
              className={styles.enrollInput}
              type="text"
              placeholder="링크를 입력하세요."
              onChange={onChangeYoutubeLink}
            />
          </div>
          <div className={styles.enrollBorder}></div>
          <div className={styles.imgBox}>
            <div className={styles.textStyle}>사진 첨부</div>
            <div className={styles.imgUpload}>
              {images?.map((image, index) => (
                <div key={index} className={styles.imageUploadButton}>
                  <input
                    type="file"
                    accept="image/*"
                    style={{ display: "none" }}
                    id={`file-input-${index}`}
                    onChange={(event) => handleFileChange(event, index)}
                  />
                  {props.isEdit ? (
                    <div>
                      <label htmlFor={`file-input-${index}`} style={{ cursor: "pointer" }}>
                        <Image
                          unoptimized={true}
                          src={`https://storage.googleapis.com/${editImages?.[index]}` || defaultImage} // 수정된 부분
                          alt={`Preview ${index + 1}`}
                          className={styles.imagePreview}
                          width={150}
                          height={150}
                        />
                      </label>
                      <button
                        onClick={() => handleDeleteImage(index)}
                        className={
                          `https://storage.googleapis.com/${editImages?.[index]}`
                            ? styles.ShowImagePrevCancelButton
                            : styles.imagePrevCancelButton
                        }
                      >
                        x
                      </button>
                    </div>
                  ) : (
                    <div>
                      <label htmlFor={`file-input-${index}`} style={{ cursor: "pointer" }}>
                        <Image
                          src={image || defaultImage}
                          alt={`Preview ${index + 1}`}
                          className={styles.imagePreview}
                          width={150}
                          height={150}
                        />
                      </label>
                      <button
                        onClick={() => handleDeleteImage(index)}
                        className={image ? styles.ShowImagePrevCancelButton : styles.imagePrevCancelButton}
                      >
                        x
                      </button>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
        <div className={styles.enrollButtonContainer}>
          <button
            className={`${styles.cancelButton} ${styles.buttonTextStyle}`}
            onClick={isEdit ? onClickCancelEdit : onClickCancelNew}
          >
            취소
          </button>
          <button
            disabled={!isEdit && isButtonDisabled}
            className={`${styles.enrollButton} ${styles.buttonTextStyle}`}
            style={enrollButtonStyle}
            onClick={onClickEnroll}
          >
            {props.isEdit ? "수정하기" : "등록하기"}
          </button>
          <Modal open={isModalOpen} onOk={handleOk}>
            <p>{modalContent}</p>
          </Modal>
        </div>
      </div>
    </>
  )
}

export default PAGE_WRITE_COMPO
