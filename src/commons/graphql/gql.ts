/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation logoutUser {\n    logoutUser\n  }\n": typeof types.LogoutUserDocument,
    "\n  query FetchBoardComments($page: Int, $boardId: ID!) {\n    fetchBoardComments(page: $page, boardId: $boardId) {\n      _id\n      writer\n      contents\n      rating\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchBoardCommentsDocument,
    "\n  mutation CreateComment(\n    $createBoardCommentInput: CreateBoardCommentInput!\n    $boardId: ID!\n  ) {\n    createBoardComment(\n      createBoardCommentInput: $createBoardCommentInput\n      boardId: $boardId\n    ) {\n      _id\n      writer\n      contents\n      rating\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.CreateCommentDocument,
    "\n  mutation UpdateBoardComment(\n    $updateBoardCommentInput: UpdateBoardCommentInput!\n    $password: String\n    $boardCommentId: ID!\n  ) {\n    updateBoardComment(\n      updateBoardCommentInput: $updateBoardCommentInput\n      password: $password\n      boardCommentId: $boardCommentId\n    ) {\n      _id\n      writer\n      contents\n      rating\n      user {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n        }\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.UpdateBoardCommentDocument,
    "\n  mutation likeBoard($boardId: ID!) {\n    likeBoard(boardId: $boardId)\n  }\n": typeof types.LikeBoardDocument,
    "\n  mutation dislikeBoard($boardId: ID!) {\n    dislikeBoard(boardId: $boardId)\n  }\n": typeof types.DislikeBoardDocument,
    "\n  query fetchBoardsOfTheBest {\n    fetchBoardsOfTheBest {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchBoardsOfTheBestDocument,
    "\n  query fetchBoards(\n    $endDate: DateTime\n    $startDate: DateTime\n    $search: String\n    $page: Int\n  ) {\n    fetchBoards(\n      endDate: $endDate\n      startDate: $startDate\n      search: $search\n      page: $page\n    ) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchBoardsDocument,
    "\n  mutation deleteBoard($boardId: ID!) {\n    deleteBoard(boardId: $boardId)\n  }\n": typeof types.DeleteBoardDocument,
    "\n  query fetchBoardsCount {\n    fetchBoardsCount\n  }\n": typeof types.FetchBoardsCountDocument,
    "\n  mutation createBoard($createBoardInput: CreateBoardInput!) {\n    createBoard(createBoardInput: $createBoardInput) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.CreateBoardDocument,
    "\n  query fetchBoard($boardId: ID!) {\n    fetchBoard(boardId: $boardId) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchBoardDocument,
    "\n  mutation updateBoard(\n    $updateBoardInput: UpdateBoardInput!\n    $password: String\n    $boardId: ID!\n  ) {\n    updateBoard(\n      updateBoardInput: $updateBoardInput\n      password: $password\n      boardId: $boardId\n    ) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      createdAt\n      updatedAt\n      deletedAt\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n    }\n  }\n": typeof types.UpdateBoardDocument,
    "\n  mutation uploadFile($file: Upload!) {\n    uploadFile(file: $file) {\n      url\n    }\n  }\n": typeof types.UploadFileDocument,
    "\n  mutation loginUser($email: String!, $password: String!) {\n    loginUser(email: $email, password: $password) {\n      accessToken\n    }\n  }\n": typeof types.LoginUserDocument,
    "\n  mutation createUser($createUserInput: CreateUserInput!) {\n    createUser(createUserInput: $createUserInput) {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.CreateUserDocument,
    "\n  mutation updateUser($updateUserInput: UpdateUserInput!) {\n    updateUser(updateUserInput: $updateUserInput) {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  query fetchUserLoggedIn {\n    fetchUserLoggedIn {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n    }\n  }\n": typeof types.FetchUserLoggedInDocument,
    "\n  query fetchTravelproduct($travelproductId: ID!) {\n    fetchTravelproduct(travelproductId: $travelproductId) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchTravelproductDocument,
    "\n  query fetchTravelproducts($isSoldout: Boolean, $search: String, $page: Int) {\n    fetchTravelproducts(isSoldout: $isSoldout, search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchTravelproductsDocument,
    "\n  query fetchTravelproductsIBought($search: String, $page: Int) {\n    fetchTravelproductsIBought(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchTravelproductsIBoughtDocument,
    "\n  query fetchTravelproductsISold($search: String, $page: Int) {\n    fetchTravelproductsISold(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchTravelproductsISoldDocument,
    "\n  query fetchTravelproductsIPicked($search: String, $page: Int) {\n    fetchTravelproductsIPicked(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchTravelproductsIPickedDocument,
    "\n  query FetchTravelProductQuestions($page: Int, $travelproductId: ID!) {\n    fetchTravelproductQuestions(page: $page, travelproductId: $travelproductId) {\n      _id\n      contents\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchTravelProductQuestionsDocument,
    "\n  query FetchTravelProductQuestionsAnswers($page: Int, $travelproductQuestionId: ID!) {\n    fetchTravelproductQuestionAnswers(page: $page, travelproductQuestionId: $travelproductQuestionId) {\n      _id\n      contents\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.FetchTravelProductQuestionsAnswersDocument,
    "\n  mutation createTravelproductQuestion(\n    $createTravelproductQuestionInput: CreateTravelproductQuestionInput!\n    $travelproductId: ID!\n  ) {\n    createTravelproductQuestion(\n      createTravelproductQuestionInput: $createTravelproductQuestionInput\n      travelproductId: $travelproductId\n    ) {\n      _id\n      contents\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.CreateTravelproductQuestionDocument,
    "\n  mutation updateTravelproductQuestion(\n    $updateTravelproductQuestionInput: UpdateTravelproductQuestionInput!\n    $travelproductQuestionId: ID!\n  ) {\n    updateTravelproductQuestion(\n      updateTravelproductQuestionInput: $updateTravelproductQuestionInput\n      travelproductQuestionId: $travelproductQuestionId\n    ) {\n      _id\n      contents\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.UpdateTravelproductQuestionDocument,
    "\n  mutation deleteTravelproductQuestion($travelproductQuestionId: ID!) {\n    deleteTravelproductQuestion(travelproductQuestionId: $travelproductQuestionId)\n  }\n": typeof types.DeleteTravelproductQuestionDocument,
    "\n  mutation createTravelproduct($createTravelproductInput: CreateTravelproductInput!) {\n    createTravelproduct(createTravelproductInput: $createTravelproductInput) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.CreateTravelproductDocument,
    "\n  mutation updateTravelproduct($updateTravelproductInput: UpdateTravelproductInput!, $travelproductId: ID!) {\n    updateTravelproduct(updateTravelproductInput: $updateTravelproductInput, travelproductId: $travelproductId) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": typeof types.UpdateTravelproductDocument,
    "\n  mutation deleteTravelproduct($travelproductId: ID!) {\n    deleteTravelproduct(travelproductId: $travelproductId)\n  }\n": typeof types.DeleteTravelproductDocument,
};
const documents: Documents = {
    "\n  mutation logoutUser {\n    logoutUser\n  }\n": types.LogoutUserDocument,
    "\n  query FetchBoardComments($page: Int, $boardId: ID!) {\n    fetchBoardComments(page: $page, boardId: $boardId) {\n      _id\n      writer\n      contents\n      rating\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchBoardCommentsDocument,
    "\n  mutation CreateComment(\n    $createBoardCommentInput: CreateBoardCommentInput!\n    $boardId: ID!\n  ) {\n    createBoardComment(\n      createBoardCommentInput: $createBoardCommentInput\n      boardId: $boardId\n    ) {\n      _id\n      writer\n      contents\n      rating\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.CreateCommentDocument,
    "\n  mutation UpdateBoardComment(\n    $updateBoardCommentInput: UpdateBoardCommentInput!\n    $password: String\n    $boardCommentId: ID!\n  ) {\n    updateBoardComment(\n      updateBoardCommentInput: $updateBoardCommentInput\n      password: $password\n      boardCommentId: $boardCommentId\n    ) {\n      _id\n      writer\n      contents\n      rating\n      user {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n        }\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.UpdateBoardCommentDocument,
    "\n  mutation likeBoard($boardId: ID!) {\n    likeBoard(boardId: $boardId)\n  }\n": types.LikeBoardDocument,
    "\n  mutation dislikeBoard($boardId: ID!) {\n    dislikeBoard(boardId: $boardId)\n  }\n": types.DislikeBoardDocument,
    "\n  query fetchBoardsOfTheBest {\n    fetchBoardsOfTheBest {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchBoardsOfTheBestDocument,
    "\n  query fetchBoards(\n    $endDate: DateTime\n    $startDate: DateTime\n    $search: String\n    $page: Int\n  ) {\n    fetchBoards(\n      endDate: $endDate\n      startDate: $startDate\n      search: $search\n      page: $page\n    ) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchBoardsDocument,
    "\n  mutation deleteBoard($boardId: ID!) {\n    deleteBoard(boardId: $boardId)\n  }\n": types.DeleteBoardDocument,
    "\n  query fetchBoardsCount {\n    fetchBoardsCount\n  }\n": types.FetchBoardsCountDocument,
    "\n  mutation createBoard($createBoardInput: CreateBoardInput!) {\n    createBoard(createBoardInput: $createBoardInput) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.CreateBoardDocument,
    "\n  query fetchBoard($boardId: ID!) {\n    fetchBoard(boardId: $boardId) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchBoardDocument,
    "\n  mutation updateBoard(\n    $updateBoardInput: UpdateBoardInput!\n    $password: String\n    $boardId: ID!\n  ) {\n    updateBoard(\n      updateBoardInput: $updateBoardInput\n      password: $password\n      boardId: $boardId\n    ) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      createdAt\n      updatedAt\n      deletedAt\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n    }\n  }\n": types.UpdateBoardDocument,
    "\n  mutation uploadFile($file: Upload!) {\n    uploadFile(file: $file) {\n      url\n    }\n  }\n": types.UploadFileDocument,
    "\n  mutation loginUser($email: String!, $password: String!) {\n    loginUser(email: $email, password: $password) {\n      accessToken\n    }\n  }\n": types.LoginUserDocument,
    "\n  mutation createUser($createUserInput: CreateUserInput!) {\n    createUser(createUserInput: $createUserInput) {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.CreateUserDocument,
    "\n  mutation updateUser($updateUserInput: UpdateUserInput!) {\n    updateUser(updateUserInput: $updateUserInput) {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.UpdateUserDocument,
    "\n  query fetchUserLoggedIn {\n    fetchUserLoggedIn {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n    }\n  }\n": types.FetchUserLoggedInDocument,
    "\n  query fetchTravelproduct($travelproductId: ID!) {\n    fetchTravelproduct(travelproductId: $travelproductId) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchTravelproductDocument,
    "\n  query fetchTravelproducts($isSoldout: Boolean, $search: String, $page: Int) {\n    fetchTravelproducts(isSoldout: $isSoldout, search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchTravelproductsDocument,
    "\n  query fetchTravelproductsIBought($search: String, $page: Int) {\n    fetchTravelproductsIBought(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchTravelproductsIBoughtDocument,
    "\n  query fetchTravelproductsISold($search: String, $page: Int) {\n    fetchTravelproductsISold(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchTravelproductsISoldDocument,
    "\n  query fetchTravelproductsIPicked($search: String, $page: Int) {\n    fetchTravelproductsIPicked(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchTravelproductsIPickedDocument,
    "\n  query FetchTravelProductQuestions($page: Int, $travelproductId: ID!) {\n    fetchTravelproductQuestions(page: $page, travelproductId: $travelproductId) {\n      _id\n      contents\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchTravelProductQuestionsDocument,
    "\n  query FetchTravelProductQuestionsAnswers($page: Int, $travelproductQuestionId: ID!) {\n    fetchTravelproductQuestionAnswers(page: $page, travelproductQuestionId: $travelproductQuestionId) {\n      _id\n      contents\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.FetchTravelProductQuestionsAnswersDocument,
    "\n  mutation createTravelproductQuestion(\n    $createTravelproductQuestionInput: CreateTravelproductQuestionInput!\n    $travelproductId: ID!\n  ) {\n    createTravelproductQuestion(\n      createTravelproductQuestionInput: $createTravelproductQuestionInput\n      travelproductId: $travelproductId\n    ) {\n      _id\n      contents\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.CreateTravelproductQuestionDocument,
    "\n  mutation updateTravelproductQuestion(\n    $updateTravelproductQuestionInput: UpdateTravelproductQuestionInput!\n    $travelproductQuestionId: ID!\n  ) {\n    updateTravelproductQuestion(\n      updateTravelproductQuestionInput: $updateTravelproductQuestionInput\n      travelproductQuestionId: $travelproductQuestionId\n    ) {\n      _id\n      contents\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.UpdateTravelproductQuestionDocument,
    "\n  mutation deleteTravelproductQuestion($travelproductQuestionId: ID!) {\n    deleteTravelproductQuestion(travelproductQuestionId: $travelproductQuestionId)\n  }\n": types.DeleteTravelproductQuestionDocument,
    "\n  mutation createTravelproduct($createTravelproductInput: CreateTravelproductInput!) {\n    createTravelproduct(createTravelproductInput: $createTravelproductInput) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.CreateTravelproductDocument,
    "\n  mutation updateTravelproduct($updateTravelproductInput: UpdateTravelproductInput!, $travelproductId: ID!) {\n    updateTravelproduct(updateTravelproductInput: $updateTravelproductInput, travelproductId: $travelproductId) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n": types.UpdateTravelproductDocument,
    "\n  mutation deleteTravelproduct($travelproductId: ID!) {\n    deleteTravelproduct(travelproductId: $travelproductId)\n  }\n": types.DeleteTravelproductDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation logoutUser {\n    logoutUser\n  }\n"): (typeof documents)["\n  mutation logoutUser {\n    logoutUser\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchBoardComments($page: Int, $boardId: ID!) {\n    fetchBoardComments(page: $page, boardId: $boardId) {\n      _id\n      writer\n      contents\n      rating\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchBoardComments($page: Int, $boardId: ID!) {\n    fetchBoardComments(page: $page, boardId: $boardId) {\n      _id\n      writer\n      contents\n      rating\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateComment(\n    $createBoardCommentInput: CreateBoardCommentInput!\n    $boardId: ID!\n  ) {\n    createBoardComment(\n      createBoardCommentInput: $createBoardCommentInput\n      boardId: $boardId\n    ) {\n      _id\n      writer\n      contents\n      rating\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateComment(\n    $createBoardCommentInput: CreateBoardCommentInput!\n    $boardId: ID!\n  ) {\n    createBoardComment(\n      createBoardCommentInput: $createBoardCommentInput\n      boardId: $boardId\n    ) {\n      _id\n      writer\n      contents\n      rating\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBoardComment(\n    $updateBoardCommentInput: UpdateBoardCommentInput!\n    $password: String\n    $boardCommentId: ID!\n  ) {\n    updateBoardComment(\n      updateBoardCommentInput: $updateBoardCommentInput\n      password: $password\n      boardCommentId: $boardCommentId\n    ) {\n      _id\n      writer\n      contents\n      rating\n      user {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n        }\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBoardComment(\n    $updateBoardCommentInput: UpdateBoardCommentInput!\n    $password: String\n    $boardCommentId: ID!\n  ) {\n    updateBoardComment(\n      updateBoardCommentInput: $updateBoardCommentInput\n      password: $password\n      boardCommentId: $boardCommentId\n    ) {\n      _id\n      writer\n      contents\n      rating\n      user {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n        }\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation likeBoard($boardId: ID!) {\n    likeBoard(boardId: $boardId)\n  }\n"): (typeof documents)["\n  mutation likeBoard($boardId: ID!) {\n    likeBoard(boardId: $boardId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation dislikeBoard($boardId: ID!) {\n    dislikeBoard(boardId: $boardId)\n  }\n"): (typeof documents)["\n  mutation dislikeBoard($boardId: ID!) {\n    dislikeBoard(boardId: $boardId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchBoardsOfTheBest {\n    fetchBoardsOfTheBest {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query fetchBoardsOfTheBest {\n    fetchBoardsOfTheBest {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchBoards(\n    $endDate: DateTime\n    $startDate: DateTime\n    $search: String\n    $page: Int\n  ) {\n    fetchBoards(\n      endDate: $endDate\n      startDate: $startDate\n      search: $search\n      page: $page\n    ) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query fetchBoards(\n    $endDate: DateTime\n    $startDate: DateTime\n    $search: String\n    $page: Int\n  ) {\n    fetchBoards(\n      endDate: $endDate\n      startDate: $startDate\n      search: $search\n      page: $page\n    ) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteBoard($boardId: ID!) {\n    deleteBoard(boardId: $boardId)\n  }\n"): (typeof documents)["\n  mutation deleteBoard($boardId: ID!) {\n    deleteBoard(boardId: $boardId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchBoardsCount {\n    fetchBoardsCount\n  }\n"): (typeof documents)["\n  query fetchBoardsCount {\n    fetchBoardsCount\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createBoard($createBoardInput: CreateBoardInput!) {\n    createBoard(createBoardInput: $createBoardInput) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  mutation createBoard($createBoardInput: CreateBoardInput!) {\n    createBoard(createBoardInput: $createBoardInput) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchBoard($boardId: ID!) {\n    fetchBoard(boardId: $boardId) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query fetchBoard($boardId: ID!) {\n    fetchBoard(boardId: $boardId) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateBoard(\n    $updateBoardInput: UpdateBoardInput!\n    $password: String\n    $boardId: ID!\n  ) {\n    updateBoard(\n      updateBoardInput: $updateBoardInput\n      password: $password\n      boardId: $boardId\n    ) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      createdAt\n      updatedAt\n      deletedAt\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation updateBoard(\n    $updateBoardInput: UpdateBoardInput!\n    $password: String\n    $boardId: ID!\n  ) {\n    updateBoard(\n      updateBoardInput: $updateBoardInput\n      password: $password\n      boardId: $boardId\n    ) {\n      _id\n      writer\n      title\n      contents\n      youtubeUrl\n      likeCount\n      dislikeCount\n      images\n      createdAt\n      updatedAt\n      deletedAt\n      boardAddress {\n        zipcode\n        address\n        addressDetail\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation uploadFile($file: Upload!) {\n    uploadFile(file: $file) {\n      url\n    }\n  }\n"): (typeof documents)["\n  mutation uploadFile($file: Upload!) {\n    uploadFile(file: $file) {\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation loginUser($email: String!, $password: String!) {\n    loginUser(email: $email, password: $password) {\n      accessToken\n    }\n  }\n"): (typeof documents)["\n  mutation loginUser($email: String!, $password: String!) {\n    loginUser(email: $email, password: $password) {\n      accessToken\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createUser($createUserInput: CreateUserInput!) {\n    createUser(createUserInput: $createUserInput) {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  mutation createUser($createUserInput: CreateUserInput!) {\n    createUser(createUserInput: $createUserInput) {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateUser($updateUserInput: UpdateUserInput!) {\n    updateUser(updateUserInput: $updateUserInput) {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  mutation updateUser($updateUserInput: UpdateUserInput!) {\n    updateUser(updateUserInput: $updateUserInput) {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchUserLoggedIn {\n    fetchUserLoggedIn {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n    }\n  }\n"): (typeof documents)["\n  query fetchUserLoggedIn {\n    fetchUserLoggedIn {\n      _id\n      email\n      name\n      picture\n      userPoint {\n        _id\n        amount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchTravelproduct($travelproductId: ID!) {\n    fetchTravelproduct(travelproductId: $travelproductId) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query fetchTravelproduct($travelproductId: ID!) {\n    fetchTravelproduct(travelproductId: $travelproductId) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchTravelproducts($isSoldout: Boolean, $search: String, $page: Int) {\n    fetchTravelproducts(isSoldout: $isSoldout, search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query fetchTravelproducts($isSoldout: Boolean, $search: String, $page: Int) {\n    fetchTravelproducts(isSoldout: $isSoldout, search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchTravelproductsIBought($search: String, $page: Int) {\n    fetchTravelproductsIBought(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query fetchTravelproductsIBought($search: String, $page: Int) {\n    fetchTravelproductsIBought(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchTravelproductsISold($search: String, $page: Int) {\n    fetchTravelproductsISold(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query fetchTravelproductsISold($search: String, $page: Int) {\n    fetchTravelproductsISold(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query fetchTravelproductsIPicked($search: String, $page: Int) {\n    fetchTravelproductsIPicked(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query fetchTravelproductsIPicked($search: String, $page: Int) {\n    fetchTravelproductsIPicked(search: $search, page: $page) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchTravelProductQuestions($page: Int, $travelproductId: ID!) {\n    fetchTravelproductQuestions(page: $page, travelproductId: $travelproductId) {\n      _id\n      contents\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchTravelProductQuestions($page: Int, $travelproductId: ID!) {\n    fetchTravelproductQuestions(page: $page, travelproductId: $travelproductId) {\n      _id\n      contents\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchTravelProductQuestionsAnswers($page: Int, $travelproductQuestionId: ID!) {\n    fetchTravelproductQuestionAnswers(page: $page, travelproductQuestionId: $travelproductQuestionId) {\n      _id\n      contents\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchTravelProductQuestionsAnswers($page: Int, $travelproductQuestionId: ID!) {\n    fetchTravelproductQuestionAnswers(page: $page, travelproductQuestionId: $travelproductQuestionId) {\n      _id\n      contents\n      user {\n        _id\n        email\n        name\n        picture\n      }\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createTravelproductQuestion(\n    $createTravelproductQuestionInput: CreateTravelproductQuestionInput!\n    $travelproductId: ID!\n  ) {\n    createTravelproductQuestion(\n      createTravelproductQuestionInput: $createTravelproductQuestionInput\n      travelproductId: $travelproductId\n    ) {\n      _id\n      contents\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  mutation createTravelproductQuestion(\n    $createTravelproductQuestionInput: CreateTravelproductQuestionInput!\n    $travelproductId: ID!\n  ) {\n    createTravelproductQuestion(\n      createTravelproductQuestionInput: $createTravelproductQuestionInput\n      travelproductId: $travelproductId\n    ) {\n      _id\n      contents\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateTravelproductQuestion(\n    $updateTravelproductQuestionInput: UpdateTravelproductQuestionInput!\n    $travelproductQuestionId: ID!\n  ) {\n    updateTravelproductQuestion(\n      updateTravelproductQuestionInput: $updateTravelproductQuestionInput\n      travelproductQuestionId: $travelproductQuestionId\n    ) {\n      _id\n      contents\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  mutation updateTravelproductQuestion(\n    $updateTravelproductQuestionInput: UpdateTravelproductQuestionInput!\n    $travelproductQuestionId: ID!\n  ) {\n    updateTravelproductQuestion(\n      updateTravelproductQuestionInput: $updateTravelproductQuestionInput\n      travelproductQuestionId: $travelproductQuestionId\n    ) {\n      _id\n      contents\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteTravelproductQuestion($travelproductQuestionId: ID!) {\n    deleteTravelproductQuestion(travelproductQuestionId: $travelproductQuestionId)\n  }\n"): (typeof documents)["\n  mutation deleteTravelproductQuestion($travelproductQuestionId: ID!) {\n    deleteTravelproductQuestion(travelproductQuestionId: $travelproductQuestionId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createTravelproduct($createTravelproductInput: CreateTravelproductInput!) {\n    createTravelproduct(createTravelproductInput: $createTravelproductInput) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  mutation createTravelproduct($createTravelproductInput: CreateTravelproductInput!) {\n    createTravelproduct(createTravelproductInput: $createTravelproductInput) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateTravelproduct($updateTravelproductInput: UpdateTravelproductInput!, $travelproductId: ID!) {\n    updateTravelproduct(updateTravelproductInput: $updateTravelproductInput, travelproductId: $travelproductId) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"): (typeof documents)["\n  mutation updateTravelproduct($updateTravelproductInput: UpdateTravelproductInput!, $travelproductId: ID!) {\n    updateTravelproduct(updateTravelproductInput: $updateTravelproductInput, travelproductId: $travelproductId) {\n      _id\n      name\n      remarks\n      contents\n      price\n      tags\n      images\n      pickedCount\n      travelproductAddress {\n        _id\n        zipcode\n        address\n        addressDetail\n        lat\n        lng\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      buyer {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n          amount\n          user {\n            _id\n            email\n            name\n            picture\n          }\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      seller {\n        _id\n        email\n        name\n        picture\n        userPoint {\n          _id\n        }\n        createdAt\n        updatedAt\n        deletedAt\n      }\n      soldAt\n      createdAt\n      updatedAt\n      deletedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteTravelproduct($travelproductId: ID!) {\n    deleteTravelproduct(travelproductId: $travelproductId)\n  }\n"): (typeof documents)["\n  mutation deleteTravelproduct($travelproductId: ID!) {\n    deleteTravelproduct(travelproductId: $travelproductId)\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;